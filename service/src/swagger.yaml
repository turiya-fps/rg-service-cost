openapi: 3.0.0

info:
  version: '0.1'
  title: service-cost
  description: |
    The costing service

security:
  - BearerAuthorisation: []

servers:
  - url: 'http://localhost:{port}'
    description: Local
    variables:
      port:
        default: '3000'
  - url: 'https://cost.api.dev.env.rouge.dev'
    description: Development

tags:
  - name: quote

paths:

  # --
  # -- project
  # --

  '/quotes':
    post:
      operationId: post-quote-resource
      summary: |
        Create a new quote resource.
      tags:
        - quote
      requestBody:
        description: |
          New quote resource requirements
        content:
          'application/json':
            schema: { $ref: '#/components/schemas/QuoteResourceForCreation' }
      responses:
        '201':
          description: |
            A quote resource has been created and returned.
          content:
            'application/json':
              schema: { $ref: '#/components/schemas/QuoteResource' }
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/RequestUnauthorised' }
        '403': { $ref: '#/components/responses/ResourceForbidden' }

components:
  securitySchemes:
    BearerAuthorisation:
      type: http
      scheme: bearer


  # --
  # -- Parameters
  # --

  parameters:
    PaginationPage:
      in: query
      name: page
      schema: { type: integer }
      description: |
        The current page in the result set to be returned.
        The page size is based on the `?limit=` query parameter provided.
        This defaults to page `1`.

    PaginationLimit:
      in: query
      name: limit
      schema: { type: integer }
      description: |
        The current page size for the result set to be returned.
        The page size can be navigted with the `?page=` query parameter.
        This defaults to a page size (limit) of `15`.

  # --
  # -- Responses
  # --

  responses:
    RequestUnauthorised:
      description: |
        The request requires authentication and authorisation through a bearer token.

    ValidationError:
      description: |
        A general validation error has occured.
        This could be related to the path parameters, query parameters or the post body.
        The origin of this error will be better explained in the returned response body.

    ResourceForbidden:
      description: |
        A resource that was referenced is forbidden for your authenticated session.
        This might be a resource identity taken from the path refers to a resource owned by another user.

    ResourceNotFound:
      description: |
        A resource that was referenced was not found.
        This might be a resource identity taken from path or query parameters.
        Or in the case of a post request, this might be because of a dependant resource identity within the post body is invalid or not found.

  schemas:

    # --
    # -- Value Schemas
    # --

    Identity:
      type: string
      format: uuid
      description: |
        An unique resource identity generated by the system.
        This will take the form of a uuid@v4 formatted string.
        When referencing resources this is the only field that will be required.

    ResourceReference:
      type: object
      properties:
        id: { $ref: '#/components/schemas/Identity' }
      description: |
        An reference object containing only the unique identity of the related resource.

    DateTime:
      type: string
      format: date-time
      description: |
        A [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) formatted date time string with milliseconds as per the specification.
        All dates and times will be targetting the UTC timezone, so localisation of the date should be done on the client side.
        Like-wise, when accepting a date time the timezone <ins>MUST</ins> must be targetting UTC, validation maybe done and requests might fail if time skew is detected.

    # --
    # -- Quote Schemas
    # --

    QuoteResourceForCreation:
      type: object
      properties:
        building:
          type: object
          properties:
            building_footprint: { type: number }
            core_and_corridor_area: { type: number }
            roof: { type: number }
            roof_perimeter: { type: number }
            site_area: { type: number }
            site_perimeter: { type: number }
            facade: { type: number }
            glazed_facade: { type: number }
            apartments: { type: number }
            houses: { type: number }
            entrances: { type: number }
            double_doors: { type: number }
            single_doors: { type: number }
            misc_doors: { type: number }
            crossovers: { type: number }
            flights_of_stairs: { type: number }
            lift_levels: { type: number }
        units:
          type: array
          items:
            type: object
            properties:
              level: { type: number }
              unit: { type: string }
              quantity: { type: number }
      required:
        - building
        - units

    QuoteResource:
      type: object
      properties:
        costing:
          type: object
          properties:
            basebuild: { $ref: '#/components/schemas/CostingBreakdown' }
            modular: { $ref: '#/components/schemas/CostingBreakdown' }

    CostingBreakdown:
      type: object
      properties:
        summary:
          type: array
          items:
            type: object
            properties:
              label: { type: string }
              total: { type: number }
              cost:
                type: object
                properties:
                  unit: { type: number }
                  metres: { type: number }
              items:
                type: array
                items:
                  type: object
                  properties:
                    label: { type: string }
                    cost: { type: number }
        element:
          type: array
          items:
            type: object
            properties:
              index: { type: string }
              label: { type: string }
              total: { type: number }
              items:
                type: array
                items:
                  type: object
                  properties:
                    index: { type: string }
                    label: { type: string }
                    cost: { type: number }
